pro ee_spectra

  common widget_environment, img, didx, tidx, mouseread
  common eemouse_environment, rasterfile, rasterdir, sjifile, SiIV_EE_map, goodmap, goodmap_1403
  common data, si_1394_index,si_1394_data,sjiindex,sjidata,si_1403_index, si_1403_data,fe_index,fe_data
  
;Find the ee files needed and restore fits filepaths
  eefiles=file_search('../EE_Data','ee_*.sav')
  restore, "ee_obs_paths.sav"
  nfiles=n_elements(eefiles)

;Set the wrapper state - which file to start on?  
  if file_search('ee_wrapper_state.sav') eq "" then wrapper_state=0 else $
     restore, "ee_wrapper_state.sav"

  if wrapper_state ge nfiles then begin
     STOP, "All files already finished"
  endif
  
;Start loop 
  while wrapper_state lt nfiles do begin

;If we've already saved the second ee file with the name extended then
;skip to next loop
     print, "Restoring ee files..."
     restore, eefiles[wrapper_state]
     if file_search(rasterdir,"goodmap1403_"+strcompress(wrapper_state,/remove_all)+".sav") ne "" then begin
        wrapper_state++
        continue
     endif
     
     file=file_search(rasterdir,"goodmap1403.sav")
     if file ne "" then begin
        restore, file
        restor=1
     endif else restor=0
     
;Send ee file and fits filepath to eerestore to despike and load data
     eerestore, ee_obs_path[wrapper_state], restor

;Crop arrays to same size - DON'T NEED, BUT KEEPING SIZE INFO  
     y_slit=[[size(si_1394_data)],[size(si_1403_data)]]
     y_slit=y_slit[1,*]
     ;; min_y=where(y_slit eq min(y_slit))
     ;; if min_y eq 0 then si_1403_data=si_1403_data[0:y_slit[0],*,*] else si_1394_data=si_1394_data[0:y_slit[1],*,*]

;Make wavelength axes
     lambda_1394=si_1394_index[0].wavemin+si_1394_index[0].cdelt1*findgen(si_1394_index[0].naxis1)
     lambda_1403=si_1403_index[0].wavemin+si_1403_index[0].cdelt1*findgen(si_1403_index[0].naxis1)

;Find central wavelengths for Si IV lines
     lambda0_1394=si_1394_index.wavelnth
     lambda0_1403=si_1403_index.wavelnth

;Make velocity axes and find cutoff indices (cutoff +/-300 km/s)
     velocity_1394=3e5*(lambda_1394-lambda0_1394)/lambda0_1394 ;km/s
     velocity_1403=3e5*(lambda_1403-lambda0_1403)/lambda0_1403 ;km/s

     indices_1394=where((velocity_1394 le 300) AND (velocity_1394 ge -300))
     indices_1403=where((velocity_1403 le 300) AND (velocity_1403 ge -300))

;Collapse whole slit on itself     
     sum_1394=total_1d(si_1394_data,2) 
     sum_1403=total_1d(si_1403_data,2)     

;Apply cutoffs to collapsed data and velocity axes     
     velocity_1394=velocity_1394(indices_1394)
     sum_1394=sum_1394(indices_1394,*)
     
     velocity_1403=velocity_1403(indices_1403)
     sum_1403=sum_1403(indices_1403,*)

;Free memory for arrays we won't use again
     undefine, indices_1394
     undefine, indices_1403
     undefine, lambda0_1394
     undefine, lambda0_1403
STOP
;Plot 1394 and 1403 lines on the same set of axes
     p1=plot(velocity_1394,sum_1394,'r',/widgets)
     p1=plot(velocity_1403,sum_1403,'b',/overplot)
     p1.title="Si IV 1394A (red) and 1403A (blue)"
     p1.xtitle="Velocity (km/s)"
     p1.ytitle="Intensity"
STOP
;Calculate indices where we will interpolate 1394 data to fit 1403 velocities
     fit_1403=linfit(velocity_1403, indgen(n_elements(velocity_1403)))
     indices_1394=fit_1403[0]+fit_1403[1]*velocity_1394
STOP
;Interpolate 1394 data to fit 1403 velocities
     int_1394=interpolate(sum_1394,indices_1394,/grid,missing=0)
     sz_1394=size(int_1394)
STOP   
;Calculate line ratio
     diff=(n_elements(velocity_1403)-n_elements(velocity_1394))/2
     if diff eq round(diff) then begin
        if diff eq 0 then lineratio=int_1394/sum_1403(*,0:sz_1394[2])
        if diff gt 0 then lineratio=int_1394/sum_1403((diff-1):n_elements(sum_1403)-diff)
     endif
     
;Calculate optical depth - re-do at some point...


;Remove fits files
     ee_dataclear, ee_obs_path[wrapper_state]
     
;Determine whether to continue
     char=''
     read, char, prompt="You just completed iteration number"+string([wrapper_state])+". Continue operations? Press N to quit"
     if (char eq 'n') OR (char eq 'N') then break

;If continue then save final version of goodmap_1403     
     print, "Continuing on to iteration number"+wrapper_state
     file_move, rasterdir+"goodmap1403.sav", rasterdir+"goodmap1403_"+strmid(eefiles[wrapper_state],25,9)
     wrapper_state++
     save, wrapper_state, file="ee_wrapper_state.pro"
  endwhile
     
end
